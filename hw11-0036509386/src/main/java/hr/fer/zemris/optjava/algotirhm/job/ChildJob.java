package hr.fer.zemris.optjava.algotirhm.job;

import hr.fer.zemris.generic.ga.ArrayGASolution;
import hr.fer.zemris.generic.ga.GASolution;
import hr.fer.zemris.generic.ga.IGAEvaluator;
import hr.fer.zemris.optjava.algotirhm.ParallelGA;
import hr.fer.zemris.optjava.crossover.Crossover;
import hr.fer.zemris.optjava.mutator.Mutator;
import hr.fer.zemris.optjava.selection.Selection;

import java.util.List;

/**
 * A Job used by {@link ParallelGA} worker threads.
 *
 * @author Mateo Imbri≈°ak
 */

public class ChildJob {

    /**
     * Population used in this job.
     */
    private final List<GASolution<int[]>> population;

    /**
     * Used to evaluate solutions.
     */
    private final IGAEvaluator<int[]> evaluator;

    /**
     * Used to perform selection on the population.
     */
    private final Selection<GASolution<int[]>> selection;

    /**
     * Used to mutate newly created children.
     */
    private final Mutator<GASolution<int[]>> mutator;

    /**
     * Used to cross two parents and create a child.
     */
    private final Crossover<GASolution<int[]>> crossover;

    /**
     * Number of children that have to be generated by this job.
     */
    private final int childrenToGenerate;

    /**
     * Default constructor that assigns all values.
     *
     * @param population used by this job.
     * @param evaluator used to evaluate solutions.
     * @param selection used to select parents.
     * @param mutator used to mutate children.
     * @param crossover used to cross the parents.
     * @param childrenToGenerate number of children to be generated.
     */
    public ChildJob(List<GASolution<int[]>> population, IGAEvaluator<int[]> evaluator,
                    Selection<GASolution<int[]>> selection, Mutator<GASolution<int[]>> mutator,
                    Crossover<GASolution<int[]>> crossover, int childrenToGenerate) {
        this.population = population;
        this.evaluator = evaluator;
        this.selection = selection;
        this.mutator = mutator;
        this.crossover = crossover;
        this.childrenToGenerate = childrenToGenerate;
    }

    /**
     * Runs the job.
     *
     * @return {@link #childrenToGenerate} children.
     */
    public ArrayGASolution[] execute() {
        ArrayGASolution[] children = new ArrayGASolution[childrenToGenerate];

        for (int i = 0; i < childrenToGenerate; i++) {
            GASolution<int[]> firstParent = selection.select(population);
            GASolution<int[]> secondParent;

            do {
                secondParent = selection.select(population);
            } while (firstParent == secondParent);

            GASolution<int[]> child = crossover.cross(firstParent, secondParent);
            child = mutator.mutate(child);

            evaluator.evaluate(child);

            children[i] = (ArrayGASolution) child;
        }

        return children;
    }
}
